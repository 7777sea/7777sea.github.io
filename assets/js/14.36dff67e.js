(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{373:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"一、-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、-栈"}},[t._v("#")]),t._v(" 一、 栈")]),t._v(" "),s("p",[t._v("栈是一种遵从后进先出 (LIFO / Last In First Out) 原则的有序集合，它的结构类似如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/404791bedce63c1de8904ed0f6669d079dd13640a6928fce64a8b5ffe7dfc0e3/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343139363033303737382d31303762396536632d663038642d346361612d386563662d6664313761323839336130652e706e67",alt:"img"}})]),t._v(" "),s("p",[t._v("栈的操作主要有： "),s("code",[t._v("push(e)")]),t._v(" (进栈)、 "),s("code",[t._v("pop()")]),t._v(" (出栈)、 "),s("code",[t._v("isEmpty()")]),t._v(" (判断是否是空栈)、 "),s("code",[t._v("size()")]),t._v(" (栈大小)，以及 "),s("code",[t._v("clear()")]),t._v(" 清空栈，具体实现也很简单。")]),t._v(" "),s("h3",{attrs:{id:"二、代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、代码实现"}},[t._v("#")]),t._v(" 二、代码实现")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Stack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" items "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("push")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("pop")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isEmpty")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("size")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" items"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("clear")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    items "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("查找：从栈头开始查找，时间复杂度为 O(n)")])]),t._v(" "),s("p",[s("strong",[t._v("插入或删除：进栈与出栈的时间复杂度为 O(1)")])]),t._v(" "),s("h3",{attrs:{id:"三、浏览器中-js-运行机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、浏览器中-js-运行机制"}},[t._v("#")]),t._v(" 三、浏览器中 JS 运行机制")]),t._v(" "),s("p",[t._v("我们知道 JavaScript 是单线程的，所谓单线程，是指在 JavaScript 引擎中负责解释和执行 JavaScript 代码的线程唯一，同一时间上只能执行一件任务。")]),t._v(" "),s("p",[t._v("为什么是单线程的？这是因为 JavaScript 可以修改 DOM 结构，如果 JavaScript 引擎线程不是单线程的，那么可以同时执行多段 JavaScript，如果这多段 JavaScript 都修改 DOM，那么就会出现 DOM 冲突。")]),t._v(" "),s("p",[t._v("为了避免 DOM 渲染的冲突，可以采用单线程或者死锁，JavaScript 采用了单线程方案。")]),t._v(" "),s("p",[t._v("但单线程有一个问题：如果任务队列里有一个任务耗时很长，导致这个任务后面的任务一直排队等待，就会发生页面卡死，严重影响用户体验。")]),t._v(" "),s("p",[t._v("为了解决这个问题，JavaScript 将任务的执行模式分为两种：同步和异步。")]),t._v(" "),s("p",[s("strong",[t._v("同步")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),s("p",[s("strong",[t._v("异步")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异步任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'时间到'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("同步任务都在主线程（这里的主线程就是 JavaScript 引擎线程）上执行，会形成一个 "),s("strong",[t._v("调用栈")]),t._v(" ，又称 **执行栈 **；")]),t._v(" "),s("p",[t._v("除了主线程外，还有一个任务队列（也称消息队列），用于管理异步任务的 "),s("strong",[t._v("事件回调")]),t._v(" ，在 "),s("strong",[t._v("调用栈")]),t._v(" 的任务执行完毕之后，系统会检查任务队列，看是否有可以执行的异步任务。")]),t._v(" "),s("p",[s("strong",[t._v("注意：任务队列存放的是异步任务的事件回调")])]),t._v(" "),s("p",[t._v("例如上例：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'时间到'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在执行这段代码时，并不会立刻打印 ，只有定时结束后（1s）才打印。 "),s("code",[t._v("setTimeout")]),t._v(" 本身是同步执行的，放入任务队列的是它的回调函数。")]),t._v(" "),s("p",[t._v("下面我们重点看一下主线程上的调用栈。")]),t._v(" "),s("h3",{attrs:{id:"四、调用栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、调用栈"}},[t._v("#")]),t._v(" 四、调用栈")]),t._v(" "),s("p",[t._v("我们从以下两个方面介绍调用栈：")]),t._v(" "),s("ul",[s("li",[t._v("调用栈的用来做什么")]),t._v(" "),s("li",[t._v("在开发中，如何利用调用栈")])]),t._v(" "),s("h4",{attrs:{id:"_1-调用栈的职责"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-调用栈的职责"}},[t._v("#")]),t._v(" 1. 调用栈的职责")]),t._v(" "),s("p",[t._v("我们知道，在 JavaScript 中有很多函数，经常会出现一个函数调用另外一个函数的情况，"),s("strong",[t._v("调用栈就是用来管理函数调用关系的一种栈结构")]),t._v(" 。")]),t._v(" "),s("p",[t._v("那么它是如何去管理函数调用关系？我们举例说明：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" c\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这段代码很简单，就是创建了一个 "),s("code",[t._v("add")]),t._v(" 函数，然后调用了它。")]),t._v(" "),s("p",[t._v("下面我们就一步步的介绍整个函数调用执行的过程。")]),t._v(" "),s("p",[t._v("在执行这段代码之前，JavaScript 引擎会先创建一个全局执行上下文，包含所有已声明的函数与变量：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/1a29237db91c6bd5eeedabfce26e96e69a5979793ad6d674125068295e7af388/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343632363539333435382d31316535643637342d326163652d343230392d613264332d3961343438343937396130352e706e67",alt:"img"}})]),t._v(" "),s("p",[t._v("从图中可以看出，代码中的全局变量 "),s("code",[t._v("a")]),t._v(" 及函数 "),s("code",[t._v("add")]),t._v(" 保存在变量环境中。")]),t._v(" "),s("p",[t._v("执行上下文准备好后，开始执行全局代码，首先执行 "),s("code",[t._v("a = 1")]),t._v(" 的赋值操作，")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/3b8cfa82925da03470970996503f9b4d65573ded5b7a6972dc263908ae1bd09d/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343632363831313336332d61613361396636622d356162642d343130302d383765322d3635393834376430343530302e706e67",alt:"img"}})]),t._v(" "),s("p",[t._v("赋值完成后 a 的值由 undefined 变为 1，然后执行 "),s("code",[t._v("add")]),t._v(" 函数，JavaScript 判断出这是一个函数调用，然后执行以下操作：")]),t._v(" "),s("ul",[s("li",[t._v("首先，从全局执行上下文中，取出 add 函数代码")]),t._v(" "),s("li",[t._v("其次，对 add 函数的这段代码进行编译，并创建该函数的执行上下文和可执行代码，并将执行上下文压入栈中")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/3b0b450dce5cad3f25c3d8597952bd5c024594a863fcf05d4daacd41d93ae26e/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343632383939313737372d30656463303536342d623037662d343662342d393539302d6430333865393438626236392e706e67",alt:"img"}})]),t._v(" "),s("ul",[s("li",[t._v("然后，执行代码，返回结果，并将 add 的执行上下文也会从栈顶部弹出，此时调用栈中就只剩下全局上下文了。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/6f368ed7db0b16b067c58c1d86a797a25d1f3270c54e9a9c523efa2981c5164c/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343632383531303134392d64663038313235382d633035352d343435332d613166622d3738363766343365343831302e706e67",alt:"img"}})]),t._v(" "),s("p",[t._v("至此，整个函数调用执行结束了。")]),t._v(" "),s("p",[t._v("所以说，"),s("strong",[t._v("调用栈是 JavaScript 用来管理函数执行上下文的一种数据结构，它记录了当前函数执行的位置，哪个函数正在被执行")]),t._v("。 如果我们执行一个函数，就会为函数创建执行上下文并放入栈顶。 如果我们从函数返回，就将它的执行上下文从栈顶弹出。 也可以说调用栈是用来管理这种执行上下文的栈，或称"),s("strong",[t._v("执行上下文栈（执行栈）")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"_2-懂调用栈的开发人员有哪些优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-懂调用栈的开发人员有哪些优势"}},[t._v("#")]),t._v(" 2. 懂调用栈的开发人员有哪些优势")]),t._v(" "),s("h5",{attrs:{id:"栈溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈溢出"}},[t._v("#")]),t._v(" 栈溢出")]),t._v(" "),s("p",[t._v("在我们执行 JavaScript 代码的时候，有时会出现栈溢出的情况：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/743c061bd6ca12077839192d7a74f3622ca87af8bb448c48a7476ef5b7dc3dcf/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343534333238353430312d32356538613030342d663732392d343461302d396163362d3730653061353634323835642e706e67",alt:"img"}})]),t._v(" "),s("p",[t._v("上图就是一个典型的栈溢出，那为什么会出现这种错误？")]),t._v(" "),s("p",[t._v("我们知道调用栈是用来管理执行上下文的一种数据结构，它是有大小的，当入栈的上下文过多的时候，它就会报栈溢出，例如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("add")]),t._v(" 函数不断的递归，不断的入栈，调用栈的容量有限，它就溢出了，所以，我们日常的开发中，一定要注意此类代码的出现。")]),t._v(" "),s("h5",{attrs:{id:"在浏览器中获取调用栈信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在浏览器中获取调用栈信息"}},[t._v("#")]),t._v(" 在浏览器中获取调用栈信息")]),t._v(" "),s("p",[t._v("两种方式，一种是断点调试，这种很简单，我们日常开发中都用过。")]),t._v(" "),s("p",[t._v("一种是 "),s("code",[t._v("console.trace()")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("trace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/0e250a4507fb924bf5df566db959a556d503e29f51bdbbe93064461433b635dd/68747470733a2f2f63646e2e6e6c61726b2e636f6d2f79757175652f302f323032302f706e672f3237333530362f313538343632393838363532322d38643635323639622d363830622d343864372d626133322d6234396530353331616435642e706e67",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"五、js-内存机制-栈-基本类型、引言类型地址-与堆-引用类型数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、js-内存机制-栈-基本类型、引言类型地址-与堆-引用类型数据"}},[t._v("#")]),t._v(" 五、JS 内存机制：栈（基本类型、引言类型地址）与堆（引用类型数据）")]),t._v(" "),s("p",[t._v("JavaScript 中的内存空间主要分为三种类型：")]),t._v(" "),s("ul",[s("li",[t._v("代码空间：主要用来存放可执行代码")]),t._v(" "),s("li",[t._v("栈空间：调用栈的存储空间就是栈空间。")]),t._v(" "),s("li",[t._v("堆空间")])]),t._v(" "),s("p",[t._v("代码空间主要用来存放可执行代码的。栈空间及堆空间主要用来存放数据的。接下来我们主要介绍栈空间及堆空间。")]),t._v(" "),s("p",[t._v("JavaScript 中的变量类型有 "),s("code",[t._v("8")]),t._v(" 种，可分为两种：基本类型、引用类型")]),t._v(" "),s("p",[t._v("基本类型：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("boolean")])]),t._v(" "),s("li",[s("code",[t._v("number")])]),t._v(" "),s("li",[s("code",[t._v("string")])]),t._v(" "),s("li",[s("code",[t._v("bigint")])]),t._v(" "),s("li",[s("code",[t._v("symbol")])])]),t._v(" "),s("p",[t._v("引用类型：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("object")])])]),t._v(" "),s("p",[t._v("其中，基本类型是保存在栈内存中的简单数据段，而引用类型保存在堆内存中。")]),t._v(" "),s("h4",{attrs:{id:"_1-栈空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-栈空间"}},[t._v("#")]),t._v(" 1. 栈空间")]),t._v(" "),s("p",[t._v("基本类型在内存中占有固定大小的空间，所以它们的值保存在栈空间，我们通过 "),s("strong",[t._v("按值访问")]),t._v(" 。")]),t._v(" "),s("p",[t._v("一般栈空间不会很大。")]),t._v(" "),s("h4",{attrs:{id:"_2-堆空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-堆空间"}},[t._v("#")]),t._v(" 2. 堆空间")]),t._v(" "),s("p",[t._v("引用类型，值大小不固定，但指向值的指针大小（内存地址）是固定的，所以把对象放入堆中，将对象的地址放入栈中，这样，在调用栈中切换上下文时，只需要将指针下移到上个执行上下文的地址就可以了，同时保证了栈空间不会很大。")]),t._v(" "),s("p",[t._v("当查询引用类型的变量时， 先从栈中读取内存地址， 然后再通过地址找到堆中的值。对于这种，我们把它叫做 "),s("strong",[t._v("按引用访问")]),t._v(" 。")]),t._v(" "),s("p",[t._v("一般堆内存空间很大，能存放很多数据，但它内存分配与回收都需要花费一定的时间。")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'an'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/5452b01bf23bcc41d653f4722e6d4f3b2b1093a27161b4c8c0993f6c54a97163/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303230303432313230323832372e706e67",alt:""}})]),t._v(" "),s("p",[t._v("基本类型（栈空间）与引用类型（堆空间）的存储方式决定了：基本类型赋值是值赋值，而引用类型赋值是地址赋值。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值赋值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b 不变")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 地址赋值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'an'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a1\na1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bottle'")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {name: "bottle"}')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b1 值改变")]),t._v("\n")])])]),s("h4",{attrs:{id:"_3-垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾回收"}},[t._v("#")]),t._v(" 3. 垃圾回收")]),t._v(" "),s("p",[t._v("JavaScript 中的垃圾数据都是由垃圾回收器自动回收的，不需要手动释放。")]),t._v(" "),s("h5",{attrs:{id:"回收栈空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回收栈空间"}},[t._v("#")]),t._v(" 回收栈空间")]),t._v(" "),s("p",[t._v("在 JavaScript 执行代码时，主线程上会存在 ESP 指针，用来指向调用栈中当前正在执行的上下文，如下图，当前正在执行 "),s("code",[t._v("foo")]),t._v(" 函数：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/0c13f49b4b6e8e9dc2f00bd5d983380fa77ce12572d7dc1bce256443cf273c73/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303230303432313230333834372e706e67",alt:""}})]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("foo")]),t._v(" 函数执行完成后，ESP 向下指向全局执行上下文，此时需要销毁 "),s("code",[t._v("foo")]),t._v(" 函数。")]),t._v(" "),s("p",[t._v("怎么销毁？")]),t._v(" "),s("p",[t._v("当 ESP 指针指向全局执行上下文，"),s("code",[t._v("foo")]),t._v(" 函数执行上下文已经是无效的了，当有新的执行上下文进来时，可以直接覆盖这块内存空间。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/30ca74d8728e81a45b3b07d5570d1428683135587d238d909e197a17feeeaec1/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303230303432313230343031342e706e67",alt:""}})]),t._v(" "),s("p",[t._v("即："),s("strong",[t._v("JavaScript 引擎通过向下移动 ESP 指针来销毁存放在栈空间中的执行上下文。")])]),t._v(" "),s("h5",{attrs:{id:"回收堆空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回收堆空间"}},[t._v("#")]),t._v(" 回收堆空间")]),t._v(" "),s("p",[t._v("V8 中把堆分成新生代与老生代两个区域：")]),t._v(" "),s("ul",[s("li",[t._v("新生代：用来存放生存周期较短的小对象，一般只支持1～8M的容量")]),t._v(" "),s("li",[t._v("老生代：用来存放生存周期较长的对象或大对象")])]),t._v(" "),s("p",[t._v("V8 对这两块使用了不同的回收器：")]),t._v(" "),s("ul",[s("li",[t._v("新生代使用副垃圾回收器")]),t._v(" "),s("li",[t._v("老生代使用主垃圾回收器")])]),t._v(" "),s("p",[t._v("其实无论哪种垃圾回收器，都采用了同样的流程（三步走）：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("标记：")]),t._v(" 标记堆空间中的活动对象（正在使用）与非活动对象（可回收）")]),t._v(" "),s("li",[s("strong",[t._v("垃圾清理：")]),t._v(" 回收非活动对象所占用的内存空间")]),t._v(" "),s("li",[s("strong",[t._v("内存整理：")]),t._v(" 当进行频繁的垃圾回收时，内存中可能存在大量不连续的内存碎片，当需要分配一个需要占用较大连续内存空间的对象时，可能存在内存不足的现象，所以，这时就需要整理这些内存碎片。")])]),t._v(" "),s("p",[t._v("副垃圾回收器与主垃圾回收器虽然都采用同样的流程，但使用的回收策略与算法是不同的。")]),t._v(" "),s("p",[s("strong",[t._v("副垃圾回收器")])]),t._v(" "),s("p",[t._v("它采用 Scavenge 算法及对象晋升策略来进行垃圾回收")]),t._v(" "),s("p",[t._v("所谓 Scavenge 算法，即把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域，如下图所示：")]),t._v(" "),s("p",[t._v("新加入的对象都加入对象区域，当对象区满的时候，就执行一次垃圾回收，执行流程如下：")]),t._v(" "),s("ul",[s("li",[t._v("标记：首先要对区域内的对象进行标记（活动对象、非活动对象）")]),t._v(" "),s("li",[t._v("垃圾清理：然后进行垃圾清理：将对象区的活动对象复制到空闲区域，并进行有序的排列，当复制完成后，对象区域与空闲区域进行翻转，空闲区域晋升为对象区域，对象区域为空闲区域")])]),t._v(" "),s("p",[t._v("翻转后，对象区域是没有碎片的，此时不需要进行第三步（内存整理了）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://camo.githubusercontent.com/99b25a5ffad0a873799f0af8287474b14b196ef363a3efe2467fb010b5c2024d/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303230303432313230343531352e706e67",alt:""}})]),t._v(" "),s("p",[t._v("但，新生代区域很小的，一般1～8M的容量，所以它很容易满，所以，JavaScript 引擎采用对象晋升策略来处理，即只要对象经过两次垃圾回收之后依然继续存活，就会被晋升到老生代区域中。")]),t._v(" "),s("p",[s("strong",[t._v("主垃圾回收器")])]),t._v(" "),s("p",[t._v("老生代区域里除了存在从新生代晋升来的存活时间久的对象，当遇到大对象时，大对象也会直接分配到老生代。")]),t._v(" "),s("p",[t._v("所以主垃圾回收器主要保存存活久的或占用空间大的对象，此时采用 Scavenge 算法就不合适了。V8 中主垃圾回收器主要采用标记-清除法进行垃圾回收。")]),t._v(" "),s("p",[t._v("主要流程如下：")]),t._v(" "),s("ul",[s("li",[t._v("标记：遍历调用栈，看老生代区域堆中的对象是否被引用，被引用的对象标记为活动对象，没有被引用的对象（待清理）标记为垃圾数据。")]),t._v(" "),s("li",[t._v("垃圾清理：将所有垃圾数据清理掉")]),t._v(" "),s("li",[t._v("内存整理：标记-整理策略，将活动对象整理到一起")])]),t._v(" "),s("p",[s("strong",[t._v("增量标记")])]),t._v(" "),s("p",[t._v("V8 浏览器会自动执行垃圾回收，但由于 JavaScript 也是运行在主线程上的，一旦执行垃圾回收，就要打断 JavaScript 的运行，可能会或多或少的造成页面的卡顿，影响用户体验，所以 V8 决定采用增量 标记算法回收：")]),t._v(" "),s("p",[t._v("即把垃圾回收拆成一个个小任务，穿插在 JavaScript 中执行。")])])}),[],!1,null,null,null);a.default=e.exports}}]);